% Numerically solve for transient conducton problem
clear all; close all; clc;

% Input parameters
grid_length = 30;    % cm  
grid_height = 5;     % cm  
dx = 0.2;            % cm  (2 mm spacing)
dy = 0.1;            % cm  (1 mm spacing)
time_max = 10;
dt = 0.001;
tolerance = 10^(-4);
k = 0.2;
cp = 1400;
rho = 1800;
alpha   = (k/(cp*rho)) * 1e4;
r_x     = alpha*dt/dx^2;
r_y     = alpha*dt/dy^2;

k_gas   = 0.07;       % W/(m·K), e.g. air
cp_gas  = 1005;        % J/(kg·K)
rho_gas = 1.2;         % kg/m^3
alpha_g = (k_gas/(cp_gas*rho_gas)) * 1e4;
r_x_g   = alpha_g*dt/dx^2;
r_y_g   = alpha_g*dt/dy^2;

P = 1; % Pressure [atm]
temp_ign = 400; % Arbitrary ignition temp
temp_flame = 2000
[rb_wsb, Tf_test, temp_flame_wsb]   = project_2_wsb_function(P,temp_ign); 

% Tf = Tf;
% % Tf = T_flame

% Tf = Tf;
temp_flame = temp_flame_wsb

% create the x, y meshgrid based on dx, dy
nx = uint32(grid_length/dx + 1);
ny = uint32(grid_height/dy + 1);
[X,Y] = meshgrid(linspace(0,grid_length,nx),linspace(0,grid_height,ny));

thickness = 0.5; % thickness of material [cm]
material = ones(ny,nx).*thickness;

% set initial and boundary conditions
temp_int = 293;
temp = temp_int*ones(ny,nx);

% iteration, march in time
n = 0; 
nmax = uint32(time_max/dt);

%Logical Matrix
node_status = zeros(ny,nx);

% Set corner node to flame temp
% T(floor(ny/2),1) = Tf;
temp((ny*0.4):(ny*0.6),2) = temp_flame;
material(1,  :) = 0;    % bottom row
material(end,:) = 0;    % top row
material(:,  1) = 0;    % left  column
material(:,end) = 0;    % right column

%–– initialize local burn‐rate & flame‐temp maps
rb_map = zeros(ny,nx);
Tf_map = temp_int * ones(ny,nx);

%–– seed the spark region with its WSB values
js = round(ny*0.4):round(ny*0.6);
is = 2;
[rb0, ~, Tf0] = project_2_wsb_function(P, temp_int);
rb_map(js,is)   = rb0;   % cm/s
Tf_map(js,is)   = Tf0;   % K

count = 0;

grid_ignite = (temp >= temp_ign) & (material > 0);
node_status = node_status | grid_ignite;
burning = node_status & (material > 0);
node_status_n0 = node_status;

test_time_history = zeros(3,nmax);
time_history_j = 25;
time_history_i = 10;

frontPos  = zeros(1,nmax);    % store front location (cm)
frontRate = zeros(1,nmax);    % store instantaneous spread rate (cm/s)


[~, Tsd_amb, ~] = project_2_wsb_function(P, temp_int);
temp_ign = Tsd_amb;    % real ignition temp [K]

% while any(burning(:)) && n < nmax
while n < nmax
    
    % Increment time
    n = n + 1;
    
    temp_n = temp;

    for j = 2:ny-1
        for i = 2:nx-1
            isGas = (temp_n(j,i) >= temp_ign) || (material(j,i) == 0);
            
            % pick diffusivities for each neighbor direction
            if isGas || material(j,i+1)==0, rxp = r_x_g; else rxp = r_x; end
            if isGas || material(j,i-1)==0, rxm = r_x_g; else rxm = r_x; end
            if isGas || material(j+1,i)==0, ryp = r_y_g; else ryp = r_y; end
            if isGas || material(j-1,i)==0, rym = r_y_g; else rym = r_y; end
            
            temp(j,i) = temp_n(j,i) ...
                + rxp*(temp_n(j,i+1)-temp_n(j,i)) - rxm*(temp_n(j,i)-temp_n(j,i-1)) ...
                + ryp*(temp_n(j+1,i)-temp_n(j,i))   - rym*(temp_n(j,i)-temp_n(j-1,i));
            % if node_status(j,i) == 1 && node_status_n0(j,i) == 0
            %    %wsb_test = project_2_wsb_function(P, T(j,i));
            %    count = count + 1;
            % end
        end
    end

    test_time_history(:,n) = [temp(time_history_j,time_history_i); burning(time_history_j,time_history_i); material(time_history_j,time_history_i)];
    
    % Search for values exceeding the ignition temperature
    node_status_n0 = node_status;
    grid_ignite = (temp >= temp_ign) & (material > 0);
    node_status = node_status | grid_ignite;

    newIgn = grid_ignite & ~node_status;  
    [Js, Is] = find(newIgn);
    for kCell = 1:numel(Js)
        j = Js(kCell); i = Is(kCell);
        [rb_loc, ~, Tf_loc] = project_2_wsb_function(P, temp_n(j,i));
        rb_map(j,i) = rb_loc;      % cm/s
        Tf_map(j,i) = Tf_loc;      % K
    end
    
    front_i      = find(any(node_status,1),1,'last');
    frontPos(n)  = (front_i-1)*dx;         % convert index to cm (col 1 → x=0)
    
    % 2) compute instantaneous spread rate
    if n>1
        frontRate(n) = (frontPos(n)-frontPos(n-1))/dt;
    else
        frontRate(n) = 0;
    end

    % Turn off nodes that have burnt out here
    burning = node_status & (material>0);
    material = material - burning .* (rb_map * dt);
    material(material<0)=0;
    
    temp(newIgn)   = Tf_map(newIgn);

    node_status (material == 0) = 0;

    plot_refresh = 50;
    if uint16(n/plot_refresh) == n/plot_refresh % refresh the plot every 50 time steps to save time     
        clf
        
        subplot(1,3,1)
        contourf(X, Y, temp,  10, 'LineColor','none')
        title(sprintf('T @ %g s', n*dt))
        xlabel('x (cm)')
        ylabel('y (cm)')
        colorbar
        axis equal tight
        
        subplot(1,3,2)
        contourf(X, Y, material, 10, 'LineColor','none')
        title(sprintf('Thickness @ %g s', n*dt))
        xlabel('x (cm)')
        ylabel('y (cm)')
        axis equal tight
        
        subplot(1,3,3)
        contourf(X, Y, node_status, 2, 'LineColor','none')
        title(sprintf('Burning @ %g s', n*dt))
        xlabel('x (cm)')
        ylabel('y (cm)')
        axis equal tight
        
        pause(0.1)
    end
    

    % check for convergence
    stillSolid = ~node_status;  
    if ~any(burning(:))
        err = max(abs(temp(stillSolid) - temp_n(stillSolid)));
        if err <= tolerance
            fprintf("Converged at t=%g s after all burning ended (err=%g)\n", n*dt, err);
            break
        end
    end
end

avgSpread = frontPos(n)/(n*dt);
fprintf('Average flame spread = %.3f cm/s\n', avgSpread);

test_time_history = test_time_history(:,1:n);

%% Time History Plotting
figure
plot(1:n,test_time_history(1,:))
ylim([0 2200])
hold on
grid on
yyaxis right
plot(1:n,test_time_history(3,:))

